var S=Object.defineProperty;var d=(e,o)=>S(e,"name",{value:o,configurable:!0});process.stdin.resume();process.stdin.setEncoding("utf8");var n={},p=d(e=>{if(e.length>8e3)return["Unable to accept payload. Max ipc payload size reached (Exceeds","JSStringGetMaximumUTF8CStringSize), consider writing and reading a file."].join(" ")},"exceedsMaxSize");console.log=(...e)=>{process.stdout.write("stdout;"+e.join(" "))};console.error=(...e)=>{process.stderr.write(e.join(" "))};n.receive=e=>{process.stdin.on("data",async o=>{let s=o.split(";");if(s[0]!=="ipc")return;let r=s[1],g=s[2],l=s[3],t="";try{let i=Buffer.from(l,"base64"),m=JSON.parse(i.toString());t=await e(m)}catch(i){t=i.message,r=1}typeof t=="object"&&(t=JSON.stringify(t)),t=Buffer.from(t).toString("base64");let f=p(t);f&&(r=1,t=f);let u=`ipc;${r};${g};${String(t)}\0`;process.stdout.write(u)})};n.send=e=>{typeof e=="object"&&(e=JSON.stringify(e)),e=Buffer.from(e).toString("base64");let o=p(e);o&&(e=o),process.stdout.write(Buffer.from(e)+"\0")};var c=n;var a=0;console.log("started");c.receive(async e=>({received:e,counter:a++}));setInterval(()=>{a++,c.send({sending:Date.now(),counter:a})},512);process.on("beforeExit",()=>{console.log("exiting")});
